// Mocks generated by Mockito 5.4.6 from annotations
// in task_manager/test/data/repository/auth_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager/core/error/base_error.dart' as _i5;
import 'package:task_manager/data/data_sources/auth/auth_data_source.dart'
    as _i3;
import 'package:task_manager/data/models/user_model.dart' as _i6;
import 'package:task_manager/data/requests/user_request.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i3.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.BaseError, _i6.UserModel>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue:
                _i4.Future<_i2.Either<_i5.BaseError, _i6.UserModel>>.value(
                  _FakeEither_0<_i5.BaseError, _i6.UserModel>(
                    this,
                    Invocation.method(#login, [email, password]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, _i6.UserModel>>);

  @override
  _i4.Future<_i2.Either<_i5.BaseError, _i6.UserModel>> getUserById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [id]),
            returnValue:
                _i4.Future<_i2.Either<_i5.BaseError, _i6.UserModel>>.value(
                  _FakeEither_0<_i5.BaseError, _i6.UserModel>(
                    this,
                    Invocation.method(#getUserById, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, _i6.UserModel>>);

  @override
  _i4.Future<_i2.Either<_i5.BaseError, int>> createUser(
    _i7.UserRequest? userRequest,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [userRequest]),
            returnValue: _i4.Future<_i2.Either<_i5.BaseError, int>>.value(
              _FakeEither_0<_i5.BaseError, int>(
                this,
                Invocation.method(#createUser, [userRequest]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, int>>);
}
