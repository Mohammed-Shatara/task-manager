// Mocks generated by Mockito 5.4.6 from annotations
// in task_manager/test/data/repository/tasks/tasks_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager/core/error/base_error.dart' as _i5;
import 'package:task_manager/data/data_sources/tasks/tasks_data_source.dart'
    as _i3;
import 'package:task_manager/data/models/task_model.dart' as _i7;
import 'package:task_manager/data/requests/task_requests.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TasksDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksDataSource extends _i1.Mock implements _i3.TasksDataSource {
  MockTasksDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.BaseError, int>> createTask(
    _i6.TaskRequest? task,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i4.Future<_i2.Either<_i5.BaseError, int>>.value(
              _FakeEither_0<_i5.BaseError, int>(
                this,
                Invocation.method(#createTask, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, int>>);

  @override
  _i4.Future<_i2.Either<_i5.BaseError, List<_i7.TaskModel>>> getTasksByUserId(
    int? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByUserId, [userId]),
            returnValue: _i4.Future<
              _i2.Either<_i5.BaseError, List<_i7.TaskModel>>
            >.value(
              _FakeEither_0<_i5.BaseError, List<_i7.TaskModel>>(
                this,
                Invocation.method(#getTasksByUserId, [userId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, List<_i7.TaskModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.BaseError, List<_i7.TaskModel>>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue: _i4.Future<
              _i2.Either<_i5.BaseError, List<_i7.TaskModel>>
            >.value(
              _FakeEither_0<_i5.BaseError, List<_i7.TaskModel>>(
                this,
                Invocation.method(#getAllTasks, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, List<_i7.TaskModel>>>);

  @override
  _i4.Stream<List<_i7.TaskModel>> watchTasks() =>
      (super.noSuchMethod(
            Invocation.method(#watchTasks, []),
            returnValue: _i4.Stream<List<_i7.TaskModel>>.empty(),
          )
          as _i4.Stream<List<_i7.TaskModel>>);

  @override
  _i4.Stream<List<_i7.TaskWithUserModel>> watchTasksWithUsers() =>
      (super.noSuchMethod(
            Invocation.method(#watchTasksWithUsers, []),
            returnValue: _i4.Stream<List<_i7.TaskWithUserModel>>.empty(),
          )
          as _i4.Stream<List<_i7.TaskWithUserModel>>);

  @override
  _i4.Future<_i2.Either<_i5.BaseError, _i7.TaskModel>> getTaskById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTaskById, [id]),
            returnValue:
                _i4.Future<_i2.Either<_i5.BaseError, _i7.TaskModel>>.value(
                  _FakeEither_0<_i5.BaseError, _i7.TaskModel>(
                    this,
                    Invocation.method(#getTaskById, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, _i7.TaskModel>>);

  @override
  _i4.Future<_i2.Either<_i5.BaseError, bool>> updateTask(
    _i6.UpdateTaskRequest? task,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<_i2.Either<_i5.BaseError, bool>>.value(
              _FakeEither_0<_i5.BaseError, bool>(
                this,
                Invocation.method(#updateTask, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.BaseError, bool>> deleteTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.BaseError, bool>>.value(
              _FakeEither_0<_i5.BaseError, bool>(
                this,
                Invocation.method(#deleteTask, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.BaseError, bool>>);
}
