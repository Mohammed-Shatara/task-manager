// Mocks generated by Mockito 5.4.6 from annotations
// in task_manager/test/domain/auth/login_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:dartz/dartz.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager/core/error/base_error.dart' as _i5;
import 'package:task_manager/core/result/result.dart' as _i6;
import 'package:task_manager/core/validators/email_validator.dart' as _i3;
import 'package:task_manager/core/validators/password_validators.dart' as _i4;
import 'package:task_manager/core/validators/required_validator.dart' as _i2;
import 'package:task_manager/data/models/user_model.dart' as _i11;
import 'package:task_manager/data/requests/user_request.dart' as _i12;
import 'package:task_manager/domain/repositories/auth_repository.dart' as _i9;
import 'package:task_manager/domain/use_cases/auth/login_use_case.dart' as _i8;
import 'package:task_manager/domain/use_cases/auth/validations/login_validator_use_case.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRequiredValidator_0 extends _i1.SmartFake
    implements _i2.RequiredValidator {
  _FakeRequiredValidator_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEmailValidator_1 extends _i1.SmartFake
    implements _i3.EmailValidator {
  _FakeEmailValidator_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePasswordValidator_2 extends _i1.SmartFake
    implements _i4.PasswordValidator {
  _FakePasswordValidator_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResult_3<E extends _i5.BaseError, D> extends _i1.SmartFake
    implements _i6.Result<E, D> {
  _FakeResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginValidatorUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginValidatorUseCase extends _i1.Mock
    implements _i7.LoginValidatorUseCase {
  MockLoginValidatorUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequiredValidator get requiredValidator =>
      (super.noSuchMethod(
            Invocation.getter(#requiredValidator),
            returnValue: _FakeRequiredValidator_0(
              this,
              Invocation.getter(#requiredValidator),
            ),
          )
          as _i2.RequiredValidator);

  @override
  _i3.EmailValidator get emailValidator =>
      (super.noSuchMethod(
            Invocation.getter(#emailValidator),
            returnValue: _FakeEmailValidator_1(
              this,
              Invocation.getter(#emailValidator),
            ),
          )
          as _i3.EmailValidator);

  @override
  _i4.PasswordValidator get passwordValidator =>
      (super.noSuchMethod(
            Invocation.getter(#passwordValidator),
            returnValue: _FakePasswordValidator_2(
              this,
              Invocation.getter(#passwordValidator),
            ),
          )
          as _i4.PasswordValidator);

  @override
  _i6.Result<_i5.BaseError, bool> call(_i8.LoginParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _FakeResult_3<_i5.BaseError, bool>(
              this,
              Invocation.method(#call, [params]),
            ),
          )
          as _i6.Result<_i5.BaseError, bool>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i9.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue:
                _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>>.value(
                  _FakeResult_3<_i5.BaseError, _i11.UserModel>(
                    this,
                    Invocation.method(#login, [email, password]),
                  ),
                ),
          )
          as _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>>);

  @override
  _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>> createUser(
    _i12.UserRequest? userRequest,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [userRequest]),
            returnValue:
                _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>>.value(
                  _FakeResult_3<_i5.BaseError, _i11.UserModel>(
                    this,
                    Invocation.method(#createUser, [userRequest]),
                  ),
                ),
          )
          as _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>>);

  @override
  _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>> getUserById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [id]),
            returnValue:
                _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>>.value(
                  _FakeResult_3<_i5.BaseError, _i11.UserModel>(
                    this,
                    Invocation.method(#getUserById, [id]),
                  ),
                ),
          )
          as _i10.Future<_i6.Result<_i5.BaseError, _i11.UserModel>>);

  @override
  _i6.Result<_i5.BaseError, Model> executeWithoutConvert<Model, Entity>({
    required _i13.Either<_i5.BaseError, Model>? remoteResult,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#executeWithoutConvert, [], {
              #remoteResult: remoteResult,
            }),
            returnValue: _FakeResult_3<_i5.BaseError, Model>(
              this,
              Invocation.method(#executeWithoutConvert, [], {
                #remoteResult: remoteResult,
              }),
            ),
          )
          as _i6.Result<_i5.BaseError, Model>);
}
