// Mocks generated by Mockito 5.4.6 from annotations
// in task_manager/test/domain/auth/get_user_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i8;
import 'package:mockito/mockito.dart' as _i2;
import 'package:task_manager/core/error/base_error.dart' as _i1;
import 'package:task_manager/core/result/result.dart' as _i3;
import 'package:task_manager/data/models/user_model.dart' as _i6;
import 'package:task_manager/data/requests/user_request.dart' as _i7;
import 'package:task_manager/domain/repositories/auth_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<E extends _i1.BaseError, D> extends _i2.SmartFake
    implements _i3.Result<E, D> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i2.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue:
                _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>>.value(
                  _FakeResult_0<_i1.BaseError, _i6.UserModel>(
                    this,
                    Invocation.method(#login, [email, password]),
                  ),
                ),
          )
          as _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>>);

  @override
  _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>> createUser(
    _i7.UserRequest? userRequest,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [userRequest]),
            returnValue:
                _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>>.value(
                  _FakeResult_0<_i1.BaseError, _i6.UserModel>(
                    this,
                    Invocation.method(#createUser, [userRequest]),
                  ),
                ),
          )
          as _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>>);

  @override
  _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>> getUserById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [id]),
            returnValue:
                _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>>.value(
                  _FakeResult_0<_i1.BaseError, _i6.UserModel>(
                    this,
                    Invocation.method(#getUserById, [id]),
                  ),
                ),
          )
          as _i5.Future<_i3.Result<_i1.BaseError, _i6.UserModel>>);

  @override
  _i3.Result<_i1.BaseError, Model> executeWithoutConvert<Model, Entity>({
    required _i8.Either<_i1.BaseError, Model>? remoteResult,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#executeWithoutConvert, [], {
              #remoteResult: remoteResult,
            }),
            returnValue: _FakeResult_0<_i1.BaseError, Model>(
              this,
              Invocation.method(#executeWithoutConvert, [], {
                #remoteResult: remoteResult,
              }),
            ),
          )
          as _i3.Result<_i1.BaseError, Model>);
}
